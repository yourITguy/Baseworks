version = "1.0"

local tArgs = {...}

-- hardware handler
local hardware = {
	modemSide = nil,
	monitor = nil,
  initialize = function(self)
    -- detect modem
    local typeName = "modem"
		if peripheral.getType("top") == typeName then
		  self.modemSide = "top"
		elseif peripheral.getType("right") == typeName then
		  self.modemSide = "right"
		elseif peripheral.getType("bottom") == typeName then
		  self.modemSide = "bottom"
		elseif peripheral.getType("left") == typeName then
		  self.modemSide = "left"
		elseif peripheral.getType("front") == typeName then
		  self.modemSide = "front"
		elseif peripheral.getType("back") == typeName then
		  self.modemSide = "back"
		end
    
    -- detect monitor
    self.monitor = peripheral.find("monitor")
  end
}

-- color palettes
local palettes = {
	color = {
		good = colors.lime,
		bad = colors.red,
    label = colors.lightGray,
    bg = colors.black,
    text = colors.white,
    titleBg = colors.orange,
    titleText = colors.black,
    helpText = colors.orange,
	},
	bw = {
		good = colors.white,
		bad = colors.white,
    label = colors.white,
    bg = colors.black,
    text = colors.white,
    titleBg = colors.white,
    titleText = colors.black,
    helpText = colors.white,
	}
}

-- configuration handler
local config = {
  dir = "/data",
	name = "config",
  settings = {},
  path = function(self)
    return self.dir.."/"..self.name
  end,
	save = function(self)
		-- make directory if needed
		if not fs.exists(self.dir) then
			fs.makeDir(self.dir)
		end
		-- write file
		local fh = fs.open(self:path(), "w") or error("Error writing config file.", 2)
		fh.write(textutils.serialize(self.settings))
		fh.close()
	end,
	load = function(self)
		-- read file
		local fh = fs.open(self:path(), "r") or error("Error opening config file.")
		local data = fh.readAll()
		self.settings = textutils.unserialize(data)
		fh.close()
	end,
  exists = function(self)
    return fs.exists(self:path())
  end
}

-- protocol definition
local protocol = {
	name = "baseworks",	
	codes = {
		query = "QUERY",
		on = "ACTIVATE",
		off = "DEACTIVATE",
    reset = "RESET",
    success = "SUCCESS",
    failure = "FAILURE",
    invalid = "INVALID",
    status = "STATUS"
	},
  decode = function(self, message)           
    -- decode
    message = textutils.unserialize(message)
    
    return message.code, message.data
  end,
  encode = function(self, code, data)
    return textutils.serialize({ code = code, data = data })
  end,
  send = function(self, to, code, data)
    -- open modem
    rednet.open(config.settings.modemSide)
    
    -- encode message
    local message = self:encode(code, data)
    
    -- send
    rednet.send(to, message, self.name)
    
    -- turn off modem
    rednet.close(config.settings.modemSide)
  end,
  broadcast = function(self, code, data)
    -- open modem
    rednet.open(config.settings.modemSide)
    
    -- broadcast query code
    rednet.broadcast(textutils.serialize({ code = code, data = data }), self.name)
  end,
  query = function(self)
    -- open modem
    rednet.open(config.settings.modemSide)
    
    -- broadcast query code
    self:broadcast(self.codes.query, {})
  end
}

-- logger definition
local logger = {
  dir = "/data",
  name = "log",
  path = function(self)
    return self.dir.."/"..self.name
  end,  
  log = function(self, from, to, command, reply)
    -- make directory if needed
    if not fs.exists(self.dir) then
			fs.makeDir(self.dir)
		end
    -- append file
    local fh = fs.open(self:path(), "a") or error("Error writing log file.", 2)
    
    data = {
      at = textutils.formatTime(os.time()).." on day "..os.day(),
      from = from,
      to = to,
      command = command,
      reply = reply
    }
    
		fh.writeLine(textutils.serialize(data)..",")
		fh.close()
  end,
  readLast = function(self)
    local last = {
      at = "",
      from = "",
      to = "",
      command = "",
      reply = ""
    }
  
    if fs.exists(self:path()) then
      -- read file    
      local fh = fs.open(self:path(), "r") or error("Error reading log file.")
      
      -- get last
      local allEntries = textutils.unserialize("{\n"..fh.readAll().."\n}")
                  
      -- deserialize
      if #allEntries > 0 then
        last = allEntries[#allEntries]
      end
      
      fh.close()
    end
    
    return last
  end,
}

-- drawing instructions for the various screens
local draw = {
  choosePalette = function(self, display)
    if (display.isColor()) then
      return palettes.color
    else
      return palettes.bw
    end
  end,
  titleBar = function(self, display, title)
    local palette = self:choosePalette(display)
    
    -- determine display size
    local width, height = display.getSize()
    
    title = title.." v"..version
        
    display.setCursorPos(1,1)
    display.setBackgroundColor(palette.titleBg)
    display.setTextColor(palette.titleText)
    display.write(string.rep(" ",math.floor(width/2)-(#title/2)) .. title .. string.rep(" ",math.ceil(width/2)+(#title/2)))
    
    display.setBackgroundColor(palette.bg)
  end,
  helpBar = function(self, display, keys)
    local palette = self:choosePalette(display)
    
    -- determine display size
    local width, height = display.getSize()
    
    -- draw keys
    display.setCursorPos(1,height)
    for index,value in pairs(keys) do
      display.write("[")
      display.setTextColor(palette.helpText)
      display.write(value.key)
      display.setTextColor(palette.text)
      display.write("]")
      display.write(value.suffix)
      display.write(" ")
    end   
  end,
  writeValue = function(self, display, x, y, label, value, valueColor)
    local palette = self:choosePalette(display)
    
    display.setCursorPos(x,y)
    
    display.setTextColor(palette.label)
    display.write(label..": ")
    
    if valueColor == nil then
      valueColor = palette.text
    end
    
    display.setTextColor(valueColor)
    display.write(value)    
  end,
  moduleMainScreen = function(self, display, module)
    local palette = self:choosePalette(display)
    
    -- determine display size
    local width, height = display.getSize()
        
    display.clear()
  
    -- draw title bar
    self:titleBar(display, "Baseworks Module")
    
    -- draw id
    self:writeValue(display, 1, 3, "ID", os.getComputerID())    
    
    -- draw name
    self:writeValue(display, 1, 4, "Name", config.settings.name)
        
    -- draw note
    self:writeValue(display, 1, 5, "Note", config.settings.note)   
    
    -- draw state
    color = palette.text
    stateName = ""
    if module.isOn == true then
      color = palette.good
      stateName = config.settings.onStateName
    else
      color = palette.bad
      stateName = config.settings.offStateName
    end      
    
    self:writeValue(display, 1, 7, "State", stateName, color)

    -- draw log
    display.setTextColor(palette.label)
    
    display.setCursorPos(1,9)      
    display.write("Last Command")
    
    display.setCursorPos(1,10)
    display.write("------------")    
    
    local lastCommand = logger:readLast()
    
    self:writeValue(display, 1, 11, "At", lastCommand.at)
    self:writeValue(display, 1, 12, "By", lastCommand.from)
    self:writeValue(display, 1, 13, "Command", lastCommand.command)  
    self:writeValue(display, 1, 14, "Reply", lastCommand.reply)
    
    -- draw help menu
    self:helpBar(display, module.keys)

  end,
  shutdown = function(self, display)
    local palette = self:choosePalette(display)
    
    display.clear()
    
    display.setCursorPos(1,1)    
    display.setTextColor(palette.text)
    display.setBackgroundColor(palette.bg)
    
    display.write("Goodbye")
    
    display.setCursorPos(1,3)
  end
}


-- module definition which controls the state of the connected device
local module = {
  isOn = false,
  stopRequested = false,
  keys = { 
    shutdown = { key = "s", suffix = "hutdown" }
  },
  loadDefaultSettings = function(self)
		config.settings = {
			name = "Device Name",
			note = "A short description.",
			onStateName = "ON",
			offStateName = "OFF",
			isOnAtStartup = "false",
			rsTurnsOn = "true",
			rsSide = "back",
			modemSide = hardware.modemSide,
			monitorSide = "monitor"
		}
	end,
  setDeviceState = function(self, setToOn)  
    if setToOn == true then
      -- turn on
      if config.settings.rsTurnsOn == "true" then
        rs.setOutput(config.settings.rsSide, true)        
      else
        rs.setOutput(config.settings.rsSide, false)
      end
    else
      -- turn off
      if config.settings.rsTurnsOn == "true" then
        rs.setOutput(config.settings.rsSide, false)
      else
        rs.setOutput(config.settings.rsSide, true)
      end
    end
    -- save state
    self.isOn = setToOn
  end,
  buildInfoTable = function(self)   
    -- reply with info about self
    local stateName = config.settings.offStateName
    if self.isOn then
      stateName = config.settings.onStateName
    end
    
    return {
      name = config.settings.name,
      note = config.settings.note,
      state = stateName
    }
  end,
	handleProtocolCode = function(self, code)
    -- default to invalid code
    local reply = protocol.codes.invalid    
    
		if code == protocol.codes.query then      
      reply = protocol.codes.status
    elseif code == protocol.codes.on then   
      -- turn device on
      self:setDeviceState(true)
      reply = protocol.codes.success
    elseif code == protocol.codes.off then
      -- turn device off
      self:setDeviceState(false)
      reply = protocol.codes.success
    elseif code == protocol.codes.reset then
      -- turn device to startup state
      self:setDeviceState(config.settings.isOnAtStartup)
      reply = protocol.codes.success
    end        
    
    return reply, self:buildInfoTable()
	end,
  handleRemoteEvent = function(self, from, message)
    local reply
    local data = {}
    local code = protocol:decode(message)
    
    reply, data = self:handleProtocolCode(code)
    
    -- log command
    logger:log(from, "", code, reply)
            
    -- send reply
    protocol:send(from, reply, data)
  end,
  handleLocalEvent = function(self, key)
    -- handle keys    
    if key == self.keys.shutdown.key then -- shutdown
      -- request the app to quit gracefully
      self.stopRequested = true
    end
  end,
	start = function(self)
    -- init hardware
    hardware:initialize()
  
		-- load settings
    if config:exists() ~= true then
      self:loadDefaultSettings()
      config:save()
    end
    
    config:load()
    
		-- set default device state	
    self:setDeviceState(config.settings.isOnAtStartup)
            
		-- main loop
    while self.stopRequested ~= true do
      -- draw screen
      draw:moduleMainScreen(term, self)
    
      -- open modem
      rednet.open(config.settings.modemSide)
    
      -- start listening
      local event, object1, object2, object3 = os.pullEvent()
      
      -- handle event
      if event == "rednet_message" then
        self:handleRemoteEvent(object1, object2)
      elseif event == "char" then
        self:handleLocalEvent(object1)
      end
    end
    
    -- stop gracefully
    self:stop()
	end,
	stop = function(self)
		config:save()
    
    -- close modem
    rednet.close(config.settings.modemSide)
    
    -- turn off device
    self:setDeviceState(false)
    
    -- display shutdown screen
    draw:shutdown(term)
	end
}

local controller = {
  stopRequested = false,
  keys = {
    allon = { key = "a", suffix = "ctivate all" },
    alloff = { key = "d", suffix = "eactivate all" },
    shutdown = { key = "s", suffix = "hutdown" }
  },
  modules = {},
  loadDefaultSettings = function(self)
		config.settings = {
			name = "Terminal",
			note = "A terminal.",
      modemSide = hardware.modemSide,
      monitorSide = "none"
		}
  end,
  handleRemoteEvent = function(self, from, message)
    self.modules[from] = from
        
    local id = from
    local code, data = protocol:decode(message)
        
    print(id)
    print(code)
    print(data.name)
    print(data.note)
    print(data.state)
    print("")
  end,
  handleLocalEvent = function(self, key)
    -- handle keys    
    if key == self.keys.shutdown.key then -- shutdown
      -- request the app to quit gracefully
      self.stopRequested = true
    elseif key == self.keys.allon.key then -- activate all
      -- broadcast activate command
      protocol:broadcast(protocol.codes.on, {})
    elseif key == self.keys.alloff.key then -- deactivate all
      -- broadcast deactivate command
      protocol:broadcast(protocol.codes.off, {})
    end
  end,  
  start = function(self)
    -- init hardware
    hardware:initialize()
  
    -- load settings
    if config:exists() ~= true then
      self:loadDefaultSettings()
      config:save()
    end
    
    config:load()
    
    -- main loop
    --while true do
      -- find controllers      
    protocol:query()
    
    while self.stopRequested ~= true do
      -- draw screen
    
      -- open modem
      rednet.open(config.settings.modemSide)
    
      -- start listening
      local event, object1, object2, object3 = os.pullEvent()
      
      -- handle event
      if event == "rednet_message" then
        self:handleRemoteEvent(object1, object2)
      elseif event == "char" then
        self:handleLocalEvent(object1)
      end
      
    end
  end
}


-- handle arguments
if #tArgs == 0 then
  print("Usage: baseworks <controller | module>")
else
  if tArgs[1] == "controller" then
    controller:start()
  elseif tArgs[1] == "module" then
    module:start()
  else
    print("Unrecognized parameter")
  end
end
